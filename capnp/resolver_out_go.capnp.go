// Code generated by capnpc-go. DO NOT EDIT.

package pangine

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// input of cpp llvm resolver
type ResolverOut struct{ capnp.Struct }

// ResolverOut_TypeID is the unique identifier for the type ResolverOut.
const ResolverOut_TypeID = 0x8dba62e6debc9617

func NewResolverOut(s *capnp.Segment) (ResolverOut, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ResolverOut{st}, err
}

func NewRootResolverOut(s *capnp.Segment) (ResolverOut, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ResolverOut{st}, err
}

func ReadRootResolverOut(msg *capnp.Message) (ResolverOut, error) {
	root, err := msg.RootPtr()
	return ResolverOut{root.Struct()}, err
}

func (s ResolverOut) String() string {
	str, _ := text.Marshal(0x8dba62e6debc9617, s.Struct)
	return str
}

func (s ResolverOut) IsInst() bool {
	return s.Struct.Bit(0)
}

func (s ResolverOut) SetIsInst(v bool) {
	s.Struct.SetBit(0, v)
}

func (s ResolverOut) TakeBytes() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s ResolverOut) SetTakeBytes(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s ResolverOut) Inst() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ResolverOut) HasInst() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ResolverOut) InstBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ResolverOut) SetInst(v string) error {
	return s.Struct.SetText(0, v)
}

// ResolverOut_List is a list of ResolverOut.
type ResolverOut_List struct{ capnp.List }

// NewResolverOut creates a new list of ResolverOut.
func NewResolverOut_List(s *capnp.Segment, sz int32) (ResolverOut_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ResolverOut_List{l}, err
}

func (s ResolverOut_List) At(i int) ResolverOut { return ResolverOut{s.List.Struct(i)} }

func (s ResolverOut_List) Set(i int, v ResolverOut) error { return s.List.SetStruct(i, v.Struct) }

func (s ResolverOut_List) String() string {
	str, _ := text.MarshalList(0x8dba62e6debc9617, s.List)
	return str
}

// ResolverOut_Promise is a wrapper for a ResolverOut promised by a client call.
type ResolverOut_Promise struct{ *capnp.Pipeline }

func (p ResolverOut_Promise) Struct() (ResolverOut, error) {
	s, err := p.Pipeline.Struct()
	return ResolverOut{s}, err
}

const schema_debeff1c5643386f = "x\xda,\xcc\xb1J\xc3P\x18\x86\xe1\xef\xfb\xcf\xa9]" +
	"\x02z\xa4\xeaR0K\x17\x07\xc1M\xbaX\x15\xc1B" +
	"\xc1\xfeE\xc4\xc9RK\x94bMBrR\xf0\x16\x04" +
	"'\xc1\xd5Kp\x17u\xf3\x16\x1c\x1c:z\x1bG\x8a" +
	"\xae\x0f/\xefJ\xbf#\xae6\x04\xd4\xd6\x96\xc2\xc6\xd3" +
	"\xdb\xfc\xe7\xf2\xf5\x01\xbaN\x86l\xf7\xf0\xac\x19>\xe6" +
	"\xa8\xb1\x0e\xec\xac\xad\xd2\xb5\xea\xae\xb5\xe9\xf4\x05\x0cE" +
	"Rf\xd3YR\x98aV\xf9\xe1u\xb6=\x1e\xe5i" +
	"\xde\x1e\xfc\xf3IE\xdf'\xd5R\xc2\xc5\xe3\xb3\xbe\x7f" +
	"\xdd\x7fB\xadp\xbfIF\x80\xe3w\x98\xa4y\xe5\xe3" +
	"\xecJ\xe2q\x9e\xc7\xd3\xe9\xec6\xfe\xbb\x9a\xa4\x004" +
	"2\x16\xb0\x04\xdcQ\x1b\xd0\x8e\xa1\xf6\x84\x8elp\x81" +
	"\xdd\x01\xa0\xc7\x86z*\xa44(\x80\xd3-@{\x86" +
	"z.\xdc\x9b\x94\xdd\xb4\xf4$\x84\x04\x83\x1f\xdd$\x07" +
	"w>\x01KZ\x08-\xb8<Y\x04\x11\x84\x11\xf8\x1b" +
	"\x00\x00\xff\xffj\xd2?\xcd"

func init() {
	schemas.Register(schema_debeff1c5643386f,
		0x8dba62e6debc9617)
}
